// Generated by CoffeeScript 1.10.0
var assert;

assert = chai.assert;

describe('ace handling', function() {
  it('should report correctly is a card is an ace', function() {
    var cards, hand, values;
    values = [1];
    cards = values.map(function(value) {
      return new Card({
        rank: value % 13,
        suit: Math.floor(value / 13)
      });
    });
    hand = new Hand(cards);
    assert.strictEqual(hand.hasAce(), true);
    values = [6];
    cards = values.map(function(value) {
      return new Card({
        rank: value % 13,
        suit: Math.floor(value / 13)
      });
    });
    hand = new Hand(cards);
    return assert.strictEqual(hand.hasAce(), false);
  });
  it('should be worth 11 if possible without busting', function() {
    var cards, hand, values;
    values = [1];
    cards = values.map(function(value) {
      return new Card({
        rank: value % 13,
        suit: Math.floor(value / 13)
      });
    });
    hand = new Hand(cards);
    return assert.strictEqual(hand.scores(), 11);
  });
  it('should not bust with two aces', function() {
    var cards, hand, values;
    values = [1, 14];
    cards = values.map(function(value) {
      return new Card({
        rank: value % 13,
        suit: Math.floor(value / 13)
      });
    });
    hand = new Hand(cards);
    return assert.strictEqual(hand.scores(), 12);
  });
  it('should not bust with an ace and a king', function() {
    var cards, hand, values;
    values = [14, 0];
    cards = values.map(function(value) {
      return new Card({
        rank: value % 13,
        suit: Math.floor(value / 13)
      });
    });
    hand = new Hand(cards);
    return assert.strictEqual(hand.scores(), 21);
  });
  return it('should not bust with four aces', function() {
    var cards, hand, values;
    values = [1, 14, 27, 40];
    cards = values.map(function(value) {
      return new Card({
        rank: value % 13,
        suit: Math.floor(value / 13)
      });
    });
    hand = new Hand(cards);
    return assert.strictEqual(hand.scores(), 14);
  });
});

describe('game play', function() {
  it('has a dealer who won\'t hit at 17', function() {
    var cards, hand, values;
    values = [7, 0];
    cards = values.map(function(value) {
      return new Card({
        rank: value % 13,
        suit: Math.floor(value / 13)
      });
    });
    hand = new Hand(cards);
    hand.dealerPlay();
    return assert.lengthOf(hand, 2);
  });
  it('has a dealer who will hit at less than 17', function() {
    var cards, deck, hand, length1, length2, test, values;
    deck = new Deck();
    values = [7, 2];
    cards = values.map(function(value) {
      return new Card({
        rank: value % 13,
        suit: Math.floor(value / 13)
      });
    });
    hand = new Hand(cards, deck, true);
    length1 = hand.length;
    hand.dealerPlay();
    length2 = hand.length;
    test = length2 > length1;
    return assert.strictEqual(test, true);
  });
  it('should deal cards from the deck', function() {
    var deck, hand, length1, length2, test;
    deck = new Deck();
    length1 = deck.length;
    hand = new Hand([deck.pop(), deck.pop()], deck);
    length2 = deck.length;
    test = length2 < length1;
    assert.strictEqual(test, true);
    return assert.lengthOf(deck, 50);
  });
  it('should deal out two cards to each player at start', function() {
    var deck, hand, hand2;
    deck = new Deck();
    hand = deck.dealPlayer();
    hand2 = deck.dealDealer();
    assert.lengthOf(hand, 2);
    assert.lengthOf(hand2, 2);
    return assert.lengthOf(deck, 48);
  });
  return xit('should produce an informative div', function() {
    var app, appView;
    app = new App();
    appView = new AppView({
      model: app
    });
    app.get('playerHand').hit();
    app.get('playerHand').hit();
    app.get('playerHand').hit();
    app.get('playerHand').hit();
    app.get('playerHand').hit();
    app.get('playerHand').hit();
    return assert.strictEqual($('.win').length, 1);
  });
});

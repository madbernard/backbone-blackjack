// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.Hand = (function(superClass) {
  extend(Hand, superClass);

  function Hand() {
    return Hand.__super__.constructor.apply(this, arguments);
  }

  Hand.prototype.model = Card;

  Hand.prototype.initialize = function(array, deck, isDealer) {
    this.deck = deck;
    this.isDealer = isDealer;
    return this.lost = false;
  };

  Hand.prototype.hit = function() {
    this.add(this.deck.pop());
    if (this.scores() > 21) {
      console.log('calling bust');
      return this.bust();
    }
  };

  Hand.prototype.stand = function() {
    return this.trigger('stand', this);
  };

  Hand.prototype.bust = function() {
    console.log('busted');
    this.trigger('bust', this);
    return this.lost = true;

    /*
    if @isDealer
      @trigger 'youWin', @
    else
      @trigger 'dealerWins', @
     */
  };

  Hand.prototype.hasBlackjack = function() {
    if (this.scores() === 21) {
      return this.trigger('blackJackWin', this);
    }
  };

  Hand.prototype.hasAce = function() {
    return this.reduce(function(memo, card) {
      return memo || card.get('value') === 1;
    }, 0);
  };

  Hand.prototype.minScore = function() {
    return this.reduce(function(score, card) {
      return score + (card.get('revealed') ? card.get('value') : 0);
    }, 0);
  };

  Hand.prototype.scores = function() {
    if (this.hasAce() && (this.minScore() + 10 * this.hasAce()) < 22) {
      return this.minScore() + 10 * this.hasAce();
    } else {
      return this.minScore();
    }
  };

  Hand.prototype.dealerPlay = function() {
    while (this.scores() < 17) {
      this.hit();
    }
    if (!this.lost) {
      return this.trigger('stand', this);
    }

    /*
    console.log @lost
      console.log @lost
     */
  };

  return Hand;

})(Backbone.Collection);


/*

if hasace is true

make a stand function, which fires an event
  after stand, player hits will no longer register?
when stand called, the dealer gives themselves cards

make a bust event, for when any score goes over 21

make bust event listeners
when someone wins, pop up an alert saying who won
when dealer is done and both people have same score, alert says Push

make reset possible, after wins something makes game work again
potentially draw from same deck? and then new deck when all cards gone

aces are only displaying as 1's
if aces display 11 until over 21 then revert to 1's

make a blackjack event that fires a signal when frist two cards dealt to player are an ace and a 10
auto win
 */
